/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.9
 * Generated at: 2025-08-22 08:04:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class Inicio_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Login - Transporte Urbano</title>\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            height: 100vh;\r\n");
      out.write("            background-color: #f8f9fa;\r\n");
      out.write("        }\r\n");
      out.write("        .login-form {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            max-width: 400px;\r\n");
      out.write("            padding: 2rem;\r\n");
      out.write("            border: 1px solid #dee2e6;\r\n");
      out.write("            border-radius: 0.5rem;\r\n");
      out.write("            background-color: #fff;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"login-form\">\r\n");
      out.write("        <h2 class=\"text-center mb-4\">Urbanito Transporte Rápido</h2>\r\n");
      out.write("        <h4 class=\"text-center mb-4\">Inicio de Sesión</h4>\r\n");
      out.write("        \r\n");
      out.write("        <form id=\"loginForm\" action=\"login\" method=\"post\">\r\n");
      out.write("            <div class=\"mb-3\">\r\n");
      out.write("                <label for=\"usuario\" class=\"form-label\">Usuario</label>\r\n");
      out.write("                <input type=\"text\" class=\"form-control\" id=\"usuario\" name=\"usuario\" value=\"admin\" required>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"mb-3\">\r\n");
      out.write("                <label for=\"clave\" class=\"form-label\">Contraseña</label>\r\n");
      out.write("                <input type=\"password\" class=\"form-control\" id=\"clave\" name=\"clave\" value=\"123\" required>\r\n");
      out.write("            </div>\r\n");
      out.write("            \r\n");
      out.write("            <div id=\"errorMessage\" class=\"alert alert-danger\" role=\"alert\" style=\"display:none;\"></div>\r\n");
      out.write("            \r\n");
      out.write("            <button type=\"submit\" class=\"btn btn-primary w-100\">Ingresar</button>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("        $(document).ready(function() {\r\n");
      out.write("            // Se intercepta el evento de envío del formulario\r\n");
      out.write("            $('#loginForm').on('submit', function(event) {\r\n");
      out.write("                // 1. Evita que el formulario se envíe de la forma tradicional (recargando la página)\r\n");
      out.write("                event.preventDefault(); \r\n");
      out.write("\r\n");
      out.write("                var $form = $(this);\r\n");
      out.write("                var $submitButton = $form.find('button[type=\"submit\"]');\r\n");
      out.write("                var $errorMessage = $('#errorMessage');\r\n");
      out.write("\r\n");
      out.write("                // Ocultar errores previos y deshabilitar el botón\r\n");
      out.write("                $errorMessage.hide();\r\n");
      out.write("                $submitButton.prop('disabled', true).text('Ingresando...');\r\n");
      out.write("\r\n");
      out.write("                // 2. Se envían los datos al servlet usando AJAX\r\n");
      out.write("                $.ajax({\r\n");
      out.write("                    type: 'POST',\r\n");
      out.write("                    url: $form.attr('action'), // La URL es 'login'\r\n");
      out.write("                    data: $form.serialize(),   // Recopila los datos del formulario (usuario y clave)\r\n");
      out.write("                    \r\n");
      out.write("                    // 3. Si el servlet responde con éxito (no hay error)\r\n");
      out.write("                    success: function(response) {\r\n");
      out.write("                        // El servlet redirigirá, y el navegador seguirá esa redirección automáticamente\r\n");
      out.write("                        // a la página de ListadoTransporte.jsp\r\n");
      out.write("                        window.location.href = \"asignacion?accion=listar\";\r\n");
      out.write("                    },\r\n");
      out.write("                    \r\n");
      out.write("                    // 4. Si el servlet responde con un error (ej. credenciales incorrectas)\r\n");
      out.write("                    error: function(jqXHR) {\r\n");
      out.write("                        var errorMsg = \"Error de conexión. Intente de nuevo.\";\r\n");
      out.write("                        if (jqXHR.responseText) {\r\n");
      out.write("                            errorMsg = jqXHR.responseText; // Muestra el mensaje de error del servlet\r\n");
      out.write("                        }\r\n");
      out.write("                        $errorMessage.text(errorMsg).show();\r\n");
      out.write("                        $submitButton.prop('disabled', false).text('Ingresar'); // Habilita el botón de nuevo\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
