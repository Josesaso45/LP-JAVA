/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.9
 * Generated at: 2025-08-15 05:21:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.curso;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import entidades.Docente;
import java.util.ArrayList;
import entidades.Curso;

public final class curso_005feditar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/shared/navbar.jsp", Long.valueOf(1754788334889L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("entidades.Docente");
    _jspx_imports_classes.add("entidades.Curso");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr\" crossorigin=\"anonymous\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	");
      out.write("<nav class=\"navbar navbar-expand-lg bg-body-tertiary\">\r\n");
      out.write("  <div class=\"container\">\r\n");
      out.write("    <a class=\"navbar-brand\" href=\"#\">Cibertec LPI</a>\r\n");
      out.write("    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n");
      out.write("      <span class=\"navbar-toggler-icon\"></span>\r\n");
      out.write("    </button>\r\n");
      out.write("    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n");
      out.write("      <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"inicio\">Inicio</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"curso\">Cursos</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"docente\">Docentes</a>\r\n");
      out.write("        </li>\r\n");
      out.write("      </ul>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</nav>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div class=\"container\" >\r\n");
      out.write("		<h1>Registro de Cursos</h1>\r\n");
      out.write("		\r\n");
      out.write("		");

			Curso curso = (Curso)request.getAttribute("registro");
			ArrayList<Docente> docentes = (ArrayList<Docente>)request.getAttribute("listaDocentes");
		
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		<form id=\"formCurso\" action=\"curso?opcion=registrar\" method=\"post\" >\r\n");
      out.write("			<input type=\"hidden\" name=\"cursoId\" value=\"");
      out.print( curso.getCursoId() );
      out.write("\" />\r\n");
      out.write("			<div class=\"mb-3 row\">\r\n");
      out.write("				<label class=\"col-sm-2 col-form-label\">CÃ³digo</label>\r\n");
      out.write("				<div class=\"col-sm-10\" >\r\n");
      out.write("					<input type=\"text\" name=\"codigo\" class=\"form-control\" value=\"");
      out.print( curso.getCodigo() );
      out.write("\" />\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"mb-3 row\">\r\n");
      out.write("				<label class=\"col-sm-2 col-form-label\">Nombre</label>\r\n");
      out.write("				<div class=\"col-sm-10\" >\r\n");
      out.write("					<input type=\"text\" name=\"nombre\" class=\"form-control\" value=\"");
      out.print( curso.getNombre() );
      out.write("\" />\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"mb-3 row\">\r\n");
      out.write("				<label class=\"col-sm-2 col-form-label\">Vacantes</label>\r\n");
      out.write("				<div class=\"col-sm-10\" >\r\n");
      out.write("					<input type=\"text\" name=\"vacantes\" class=\"form-control\" value=\"");
      out.print( curso.getVacantes() );
      out.write("\" />\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"mb-3 row\">\r\n");
      out.write("				<label class=\"col-sm-2 col-form-label\">Docente</label>\r\n");
      out.write("				<div class=\"col-sm-10\" >\r\n");
      out.write("					<select name=\"docenteId\" class=\"form-select\" >\r\n");
      out.write("						");
 for (Docente d : docentes) { 
      out.write("\r\n");
      out.write("							<option value=\"");
      out.print(d.getDocenteId());
      out.write('"');
      out.write(' ');
      out.print((d.getDocenteId() == curso.getDocenteId() ? "selected=\"selected\"" : "") );
      out.write(" >\r\n");
      out.write("								");
      out.print(d.getNombre() );
      out.write("\r\n");
      out.write("							</option>\r\n");
      out.write("						");
 } 
      out.write("\r\n");
      out.write("					</select>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"row\" >\r\n");
      out.write("				<button type=\"submit\" class=\"btn btn-primary\" >Enviar</button>\r\n");
      out.write("			</div>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("	<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\" integrity=\"sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("	<script src=\"https://cdn.jsdelivr.net/npm/jquery-validation@1.19.5/dist/jquery.validate.min.js\" ></script>\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		$(() => {\r\n");
      out.write("			\r\n");
      out.write("			$(\"#formCurso\").validate({\r\n");
      out.write("				rules: {\r\n");
      out.write("					codigo: {\r\n");
      out.write("						required: true\r\n");
      out.write("					},\r\n");
      out.write("					nombre: {\r\n");
      out.write("						required: true,\r\n");
      out.write("						minlength: 5\r\n");
      out.write("					},\r\n");
      out.write("					vacantes: {\r\n");
      out.write("						min: 10,\r\n");
      out.write("						max: 70\r\n");
      out.write("					}\r\n");
      out.write("				},\r\n");
      out.write("				messages: {\r\n");
      out.write("					codigo: {\r\n");
      out.write("						required: 'El campo cÃ³digo es requerido'\r\n");
      out.write("					},\r\n");
      out.write("					nombre: {\r\n");
      out.write("						required: 'El campo nombre es requerido',\r\n");
      out.write("						minlength: 'El campo debe tener un mÃ­nimo de 5 caracteres'\r\n");
      out.write("					},\r\n");
      out.write("					vacantes: {\r\n");
      out.write("						min: 'El numero de vacantes debe ser mayor a 10',\r\n");
      out.write("						max: 'El numero de vacantes debe ser menor a 70'\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
